# Claude 开发助手规则文件

## 基本开发原则

### 🌏 语言使用规则
- **全程中文交流** - 所有与用户的交互必须使用中文
- **中文注释** - 代码注释使用中文编写
- **英文变量名** - 变量名和函数名使用英文，保持代码规范
- **中文文档** - 技术文档和说明文档使用中文编写

### 🚨 环境启动规则
- **禁止自动启动环境** - 开发期间不要执行 `make dev` 或其他启动命令
- **手动验证提醒** - 修改代码后，告知用户手动启动验证环境
- **启动命令提供** - 提供具体的手动启动命令但不执行

### 代码修改规则

#### 1. 错误处理策略
- **宽松验证** - 避免过于严格的参数验证导致核心功能失败  
- **降级处理** - 非关键错误时使用默认值继续执行
- **友好提示** - 错误信息要对用户友好，避免技术术语

#### 2. 日志记录规范
- **详细日志** - 在关键流程添加INFO/ERROR日志便于调试
- **参数记录** - 记录请求参数和处理结果
- **错误上下文** - 错误日志要包含足够的上下文信息

#### 3. API设计原则
- **向后兼容** - 修改API时保持向后兼容性
- **可选参数** - 尽量让参数可选，提供合理默认值
- **统一响应** - 使用统一的响应格式

## 项目特定规则

### Stellar 安全平台规则

#### 资产管理模块
- **项目关联可选** - 创建资产时项目ID是可选的
- **项目不存在处理** - 项目ID无效时创建独立资产，不报错
- **资产类型验证** - 支持多种资产类型，严格验证格式

#### 认证授权模块  
- **JWT Token必须** - 除公开接口外都需要Bearer Token
- **会话Redis存储** - 会话信息存储在Redis中
- **权限中间件** - 使用统一的认证中间件

#### 数据库操作规则
- **MongoDB主库** - 使用MongoDB作为主数据库
- **集合命名** - 按资产类型创建不同集合 (如domain_assets)
- **ObjectID处理** - 正确处理MongoDB的ObjectID类型

## 技术栈约束

### 后端 (Go)
- **框架**: 必须使用Gin框架
- **错误处理**: 使用 `internal/pkg/errors` 包
- **日志**: 使用 `internal/pkg/logger` 包  
- **配置**: 使用YAML配置文件

### 前端 (Svelte)
- **版本**: Svelte 5.7.0 (Runes模式)
- **构建**: Vite + TypeScript
- **UI**: shadcn-svelte + Tailwind CSS
- **HTTP**: axios客户端

## 开发流程规则

### 代码修改流程
1. **理解需求** - 仔细分析问题和需求
2. **查看日志** - 检查相关日志了解问题
3. **定位代码** - 找到相关的代码文件
4. **修改实现** - 按照规则进行修改
5. **提供验证** - 告知用户如何手动验证

### 测试验证流程
1. **不自动启动** - 不执行启动命令
2. **提供命令** - 给出手动启动命令
3. **测试脚本** - 提供curl测试命令示例
4. **验证指导** - 说明如何验证修改结果

## 文件操作规则

### 允许的操作
- ✅ 修改源代码文件
- ✅ 创建配置文件  
- ✅ 创建文档文件
- ✅ 读取日志文件

### 禁止的操作  
- ❌ 执行服务启动命令
- ❌ 修改数据库数据
- ❌ 删除重要配置文件
- ❌ 自动运行测试命令

## 日志文件管理

### 📋 日志文件位置
- **后端日志**: `/root/Stellar/logs/backend.log`
- **前端日志**: `/root/Stellar/logs/frontend.log`

### 🔍 调试流程规范
1. **遇到问题时**：首先检查相关日志文件
2. **日志查看命令**：
   ```bash
   # 查看后端最新日志
   tail -f /root/Stellar/logs/backend.log
   
   # 查看前端最新日志  
   tail -f /root/Stellar/logs/frontend.log
   
   # 搜索特定错误
   grep -i "error" /root/Stellar/logs/backend.log
   grep -i "分页" /root/Stellar/logs/backend.log
   ```
3. **日志分析优先级**：
   - 先查看错误级别日志
   - 然后查看警告级别日志
   - 最后查看调试级别日志

### 🚨 调试时必读日志
- **API接口问题** → 优先查看后端日志
- **前端UI问题** → 优先查看前端日志  
- **数据流问题** → 同时查看前后端日志
- **分页问题** → 查看后端日志中的GetProjects相关输出

## 错误处理指南

### 常见错误类型
1. **参数验证错误** - 改为宽松验证 + 默认值
2. **数据库连接错误** - 提供重试机制
3. **外部服务错误** - 实现熔断降级
4. **认证授权错误** - 返回明确的错误信息

### 错误响应格式
```json
{
  "error": {
    "code": "ERROR_CODE",
    "message": "用户友好的错误信息", 
    "type": "ERROR_TYPE"
  }
}
```

## 性能优化规则

### 数据库优化
- 合理使用索引
- 分页查询大数据集
- 避免N+1查询

### 缓存策略
- Redis缓存热点数据
- 合理设置过期时间
- 缓存穿透保护

### 并发处理
- 使用Goroutine处理并发
- 合理控制并发数量
- 避免死锁和竞态条件

---

## 特殊提醒

### 🔧 开发期间约定
- **环境启动**: 告知用户手动启动，不要自动执行
- **测试验证**: 提供测试命令但不自动执行  
- **日志查看**: 可以读取日志文件进行分析

### 📝 代码风格
- 遵循Go官方代码规范
- 使用有意义的英文变量和函数名
- 添加必要的中文注释说明
- 优先使用中文进行代码交流和文档编写

### 🐛 调试建议  
- 优先查看应用日志
- 检查数据库连接状态
- 验证API请求参数格式

---
*文件创建时间: 2025-07-24*  
*适用于: Stellar安全资产管理平台*