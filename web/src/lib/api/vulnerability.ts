import api from './axios-config';
import { handleApiResponse, handlePaginatedResponse } from '$lib/utils/api-response-handler';
import type {
	POC,
	POCResult,
	Vulnerability,
	VulnScanTask,
	VulnScanConfig,
	VulnScanSummary,
	VulnerabilitySeverity,
	VulnerabilityStatus,
	VulnerabilityType
} from '$lib/types/vulnerability';
import type { ApiResponse, PaginatedResponse } from '$lib/types/api';

export interface POCQueryParams {
	page?: number;
	pageSize?: number;
	type?: VulnerabilityType;
	category?: string;
	severity?: VulnerabilitySeverity;
	enabled?: boolean;
	search?: string;
}

export interface VulnerabilityQueryParams {
	page?: number;
	pageSize?: number;
	projectId?: string;
	severity?: VulnerabilitySeverity;
	status?: VulnerabilityStatus;
	type?: VulnerabilityType;
	search?: string;
}

export interface CreatePOCRequest {
	name: string;
	description: string;
	author?: string;
	references?: string[];
	cveId?: string;
	cweId?: string;
	severity: VulnerabilitySeverity;
	type: VulnerabilityType;
	category: string;
	script: string;
	scriptType: string;
	tags?: string[];
	requiredParams?: string[];
	defaultParams?: Record<string, string>;
}

export interface UpdatePOCRequest extends Partial<CreatePOCRequest> {
	enabled?: boolean;
}

export interface CreateVulnScanTaskRequest {
	projectId: string;
	taskName: string;
	targets: string[];
	targetType: string;
	config: VulnScanConfig;
	tags?: string[];
}

export interface UpdateVulnScanTaskRequest extends Partial<CreateVulnScanTaskRequest> {
	status?: string;
}

// POC管理API
export const pocApi = {
	// 获取POC列表
	async getPOCs(params?: POCQueryParams): Promise<ApiResponse<PaginatedResponse<POC>>> {
		const response = await api.get('/api/v1/vulnerability/pocs', { params });
		return handleApiResponse(response.data);
	},

	// 获取POC详情
	async getPOC(id: string): Promise<ApiResponse<POC>> {
		const response = await api.get(`/api/v1/vulnerability/pocs/${id}`);
		return handleApiResponse(response.data);
	},

	// 创建POC
	async createPOC(data: CreatePOCRequest): Promise<ApiResponse<POC>> {
		const response = await api.post('/api/v1/vulnerability/pocs', data);
		return handleApiResponse(response.data);
	},

	// 更新POC
	async updatePOC(id: string, data: UpdatePOCRequest): Promise<ApiResponse<POC>> {
		const response = await api.put(`/api/v1/vulnerability/pocs/${id}`, data);
		return handleApiResponse(response.data);
	},

	// 删除POC
	async deletePOC(id: string): Promise<ApiResponse<void>> {
		const response = await api.delete(`/api/v1/vulnerability/pocs/${id}`);
		return handleApiResponse(response.data);
	},

	// 验证POC脚本
	async validatePOC(
		script: string,
		scriptType: string
	): Promise<ApiResponse<{ valid: boolean; errors: string[] }>> {
		const response = await api.post('/api/v1/vulnerability/pocs/validate', {
			script,
			scriptType
		});
		return handleApiResponse(response.data);
	},

	// 测试POC
	async testPOC(id: string, target: string): Promise<ApiResponse<POCResult>> {
		const response = await api.post(`/api/v1/vulnerability/pocs/${id}/test`, {
			target
		});
		return handleApiResponse(response.data);
	}
};

// 漏洞管理API
export const vulnerabilityApi = {
	// 获取漏洞列表
	async getVulnerabilities(
		params?: VulnerabilityQueryParams
	): Promise<ApiResponse<PaginatedResponse<Vulnerability>>> {
		const response = await api.get('/api/v1/vulnerability/vulnerabilities', { params });
		return handleApiResponse(response.data);
	},

	// 获取漏洞详情
	async getVulnerability(id: string): Promise<ApiResponse<Vulnerability>> {
		const response = await api.get(`/api/v1/vulnerability/vulnerabilities/${id}`);
		return handleApiResponse(response.data);
	},

	// 更新漏洞状态
	async updateVulnerabilityStatus(
		id: string,
		status: VulnerabilityStatus
	): Promise<ApiResponse<Vulnerability>> {
		const response = await api.patch(`/api/v1/vulnerability/vulnerabilities/${id}/status`, {
			status
		});
		return handleApiResponse(response.data);
	},

	// 批量更新漏洞状态
	async batchUpdateVulnerabilityStatus(
		ids: string[],
		status: VulnerabilityStatus
	): Promise<ApiResponse<void>> {
		const response = await api.patch('/api/v1/vulnerability/vulnerabilities/batch/status', {
			ids,
			status
		});
		return handleApiResponse(response.data);
	},

	// 导出漏洞报告
	async exportVulnerabilities(
		params?: VulnerabilityQueryParams & { format: 'json' | 'csv' | 'pdf' | 'html' }
	): Promise<ApiResponse<{ downloadUrl: string }>> {
		const response = await api.post('/api/v1/vulnerability/vulnerabilities/export', params);
		return handleApiResponse(response.data);
	}
};

// 漏洞扫描任务API
export const vulnScanApi = {
	// 获取扫描任务列表
	async getScanTasks(params?: {
		page?: number;
		pageSize?: number;
		projectId?: string;
		status?: string;
	}): Promise<ApiResponse<PaginatedResponse<VulnScanTask>>> {
		const response = await api.get('/api/v1/vulnerability/tasks', { params });
		return handleApiResponse(response.data);
	},

	// 获取扫描任务详情
	async getScanTask(id: string): Promise<ApiResponse<VulnScanTask>> {
		const response = await api.get(`/api/v1/vulnerability/tasks/${id}`);
		return handleApiResponse(response.data);
	},

	// 创建扫描任务
	async createScanTask(data: CreateVulnScanTaskRequest): Promise<ApiResponse<VulnScanTask>> {
		const response = await api.post('/api/v1/vulnerability/tasks', data);
		return handleApiResponse(response.data);
	},

	// 更新扫描任务
	async updateScanTask(
		id: string,
		data: UpdateVulnScanTaskRequest
	): Promise<ApiResponse<VulnScanTask>> {
		const response = await api.put(`/api/v1/vulnerability/tasks/${id}`, data);
		return handleApiResponse(response.data);
	},

	// 删除扫描任务
	async deleteScanTask(id: string): Promise<ApiResponse<void>> {
		const response = await api.delete(`/api/v1/vulnerability/tasks/${id}`);
		return handleApiResponse(response.data);
	},

	// 启动扫描任务
	async startScanTask(id: string): Promise<ApiResponse<void>> {
		const response = await api.post(`/api/v1/vulnerability/tasks/${id}/start`);
		return handleApiResponse(response.data);
	},

	// 停止扫描任务
	async stopScanTask(id: string): Promise<ApiResponse<void>> {
		const response = await api.post(`/api/v1/vulnerability/tasks/${id}/stop`);
		return handleApiResponse(response.data);
	},

	// 获取扫描任务结果
	async getScanTaskResults(id: string): Promise<
		ApiResponse<{
			vulnerabilities: Vulnerability[];
			pocResults: POCResult[];
			summary: VulnScanSummary;
		}>
	> {
		const response = await api.get(`/api/v1/vulnerability/tasks/${id}/results`);
		return handleApiResponse(response.data);
	},

	// 获取扫描任务日志
	async getScanTaskLogs(id: string): Promise<ApiResponse<{ logs: string[] }>> {
		const response = await api.get(`/api/v1/vulnerability/tasks/${id}/logs`);
		return handleApiResponse(response.data);
	},

	// 重试扫描任务
	async retryScanTask(id: string): Promise<ApiResponse<void>> {
		const response = await api.post(`/api/v1/vulnerability/tasks/${id}/retry`);
		return handleApiResponse(response.data);
	}
};

// 统计API
export const vulnStatsApi = {
	// 获取漏洞统计信息
	async getVulnerabilityStats(projectId?: string): Promise<
		ApiResponse<{
			totalVulns: number;
			criticalVulns: number;
			highVulns: number;
			mediumVulns: number;
			lowVulns: number;
			infoVulns: number;
			vulnsByType: Record<string, number>;
			vulnsByStatus: Record<string, number>;
			recentVulns: Vulnerability[];
		}>
	> {
		const response = await api.get('/api/v1/vulnerability/stats', {
			params: { projectId }
		});
		return handleApiResponse(response.data);
	},

	// 获取POC统计信息
	async getPOCStats(): Promise<
		ApiResponse<{
			totalPOCs: number;
			enabledPOCs: number;
			pocsByType: Record<string, number>;
			pocsByCategory: Record<string, number>;
			pocsBySeverity: Record<string, number>;
			recentPOCs: POC[];
		}>
	> {
		const response = await api.get('/api/v1/vulnerability/pocs/stats');
		return handleApiResponse(response.data);
	},

	// 获取扫描任务统计信息
	async getScanTaskStats(projectId?: string): Promise<
		ApiResponse<{
			totalTasks: number;
			runningTasks: number;
			completedTasks: number;
			failedTasks: number;
			recentTasks: VulnScanTask[];
		}>
	> {
		const response = await api.get('/api/v1/vulnerability/tasks/stats', {
			params: { projectId }
		});
		return handleApiResponse(response.data);
	}
};

// 默认导出POC API
export default pocApi;
