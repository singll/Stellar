import { writable, derived, get } from 'svelte/store';
import { notifications } from '$lib/stores/notifications';
import { pocApi, vulnerabilityApi, vulnScanApi, vulnStatsApi } from '$lib/api/vulnerability';
import type {
	POC,
	POCResult,
	Vulnerability,
	VulnScanTask,
	VulnScanConfig,
	VulnScanSummary,
	VulnerabilitySeverity,
	VulnerabilityStatus,
	VulnerabilityType,
	POCScriptType
} from '$lib/types/vulnerability';

// 基础状态stores
export const pocs = writable<POC[]>([]);
export const selectedPOC = writable<POC | null>(null);
export const vulnerabilities = writable<Vulnerability[]>([]);
export const selectedVulnerability = writable<Vulnerability | null>(null);
export const scanTasks = writable<VulnScanTask[]>([]);
export const selectedScanTask = writable<VulnScanTask | null>(null);
export const pocResults = writable<POCResult[]>([]);

export const loading = writable<boolean>(false);
export const error = writable<string | null>(null);

export const pocPagination = writable({
	page: 1,
	pageSize: 20,
	total: 0,
	totalPages: 0
});

export const vulnerabilityPagination = writable({
	page: 1,
	pageSize: 20,
	total: 0,
	totalPages: 0
});

export const scanTaskPagination = writable({
	page: 1,
	pageSize: 20,
	total: 0,
	totalPages: 0
});

export const pocFilters = writable({
	type: undefined as VulnerabilityType | undefined,
	category: undefined as string | undefined,
	severity: undefined as VulnerabilitySeverity | undefined,
	enabled: undefined as boolean | undefined,
	search: undefined as string | undefined
});

export const vulnerabilityFilters = writable({
	projectId: undefined as string | undefined,
	severity: undefined as VulnerabilitySeverity | undefined,
	status: undefined as VulnerabilityStatus | undefined,
	type: undefined as VulnerabilityType | undefined,
	search: undefined as string | undefined
});

export const scanTaskFilters = writable({
	projectId: undefined as string | undefined,
	status: undefined as string | undefined
});

// 统计信息stores
export const vulnStats = writable({
	totalVulns: 0,
	criticalVulns: 0,
	highVulns: 0,
	mediumVulns: 0,
	lowVulns: 0,
	infoVulns: 0,
	vulnsByType: {} as Record<string, number>,
	vulnsByStatus: {} as Record<string, number>,
	recentVulns: [] as Vulnerability[]
});

export const pocStats = writable({
	totalPOCs: 0,
	enabledPOCs: 0,
	pocsByType: {} as Record<string, number>,
	pocsByCategory: {} as Record<string, number>,
	pocsBySeverity: {} as Record<string, number>,
	recentPOCs: [] as POC[]
});

export const scanTaskStats = writable({
	totalTasks: 0,
	runningTasks: 0,
	completedTasks: 0,
	failedTasks: 0,
	recentTasks: [] as VulnScanTask[]
});

// Derived stores
export const isVulnLoading = derived(loading, ($loading) => $loading);
export const vulnError = derived(error, ($error) => $error);
export const pocCount = derived(pocs, ($pocs) => $pocs.length);
export const vulnerabilityCount = derived(
	vulnerabilities,
	($vulnerabilities) => $vulnerabilities.length
);
export const scanTaskCount = derived(scanTasks, ($scanTasks) => $scanTasks.length);

export const criticalVulns = derived(vulnerabilities, ($vulnerabilities) =>
	$vulnerabilities.filter((v) => v.severity === 'critical')
);

export const runningTasks = derived(scanTasks, ($scanTasks) =>
	$scanTasks.filter((t) => t.status === 'running')
);

export const completedTasks = derived(scanTasks, ($scanTasks) =>
	$scanTasks.filter((t) => t.status === 'completed')
);

// 创建漏洞扫描store的函数
function createVulnStore() {
	return {
		// 基础状态管理
		setLoading: (isLoading: boolean) => loading.set(isLoading),
		setError: (errorMessage: string | null) => {
			error.set(errorMessage);
			if (errorMessage) {
				notifications.add({
					type: 'error',
					message: errorMessage
				});
			}
		},
		reset: () => {
			pocs.set([]);
			selectedPOC.set(null);
			vulnerabilities.set([]);
			selectedVulnerability.set(null);
			scanTasks.set([]);
			selectedScanTask.set(null);
			pocResults.set([]);
			loading.set(false);
			error.set(null);
		},

		// POC管理
		loadPOCs: async (params?: {
			page?: number;
			pageSize?: number;
			type?: VulnerabilityType;
			category?: string;
			severity?: VulnerabilitySeverity;
			enabled?: boolean;
			search?: string;
		}) => {
			loading.set(true);
			error.set(null);

			try {
				const currentFilters = get(pocFilters);
				const queryParams = { ...currentFilters, ...params };
				const response = await pocApi.getPOCs(queryParams);

				if (response.code === 200) {
					pocs.set(response.data.items);
					pocPagination.set({
						page: response.data.page,
						pageSize: response.data.pageSize,
						total: response.data.total,
						totalPages: response.data.totalPages
					});
					pocFilters.set(queryParams);
				} else {
					error.set(response.message || '加载POC列表失败');
				}
			} catch (err) {
				error.set(err instanceof Error ? err.message : '加载POC列表失败');
			} finally {
				loading.set(false);
			}
		},

		createPOC: async (data: {
			name: string;
			description: string;
			author?: string;
			references?: string[];
			cveId?: string;
			cweId?: string;
			severity: VulnerabilitySeverity;
			type: VulnerabilityType;
			category: string;
			script: string;
			scriptType: POCScriptType;
			tags?: string[];
			requiredParams?: string[];
			defaultParams?: Record<string, string>;
		}): Promise<POC | null> => {
			loading.set(true);
			error.set(null);

			try {
				const response = await pocApi.createPOC(data);

				if (response.code === 200) {
					pocs.update((currentPOCs) => [response.data, ...currentPOCs]);
					notifications.add({
						type: 'success',
						message: 'POC创建成功'
					});
					return response.data;
				} else {
					error.set(response.message || '创建POC失败');
					return null;
				}
			} catch (err) {
				error.set(err instanceof Error ? err.message : '创建POC失败');
				return null;
			} finally {
				loading.set(false);
			}
		},

		updatePOC: async (id: string, data: Partial<POC>): Promise<POC | null> => {
			loading.set(true);
			error.set(null);

			try {
				const response = await pocApi.updatePOC(id, data);

				if (response.code === 200) {
					pocs.update((currentPOCs) =>
						currentPOCs.map((poc) => (poc.id === id ? response.data : poc))
					);
					notifications.add({
						type: 'success',
						message: 'POC更新成功'
					});
					return response.data;
				} else {
					error.set(response.message || '更新POC失败');
					return null;
				}
			} catch (err) {
				error.set(err instanceof Error ? err.message : '更新POC失败');
				return null;
			} finally {
				loading.set(false);
			}
		},

		deletePOC: async (id: string): Promise<boolean> => {
			loading.set(true);
			error.set(null);

			try {
				const response = await pocApi.deletePOC(id);

				if (response.code === 200) {
					pocs.update((currentPOCs) => currentPOCs.filter((poc) => poc.id !== id));
					notifications.add({
						type: 'success',
						message: 'POC删除成功'
					});
					return true;
				} else {
					error.set(response.message || '删除POC失败');
					return false;
				}
			} catch (err) {
				error.set(err instanceof Error ? err.message : '删除POC失败');
				return false;
			} finally {
				loading.set(false);
			}
		},

		validatePOC: async (
			script: string,
			scriptType: POCScriptType
		): Promise<{ valid: boolean; errors: string[] } | null> => {
			try {
				const response = await pocApi.validatePOC(script, scriptType);
				if (response.code === 200) {
					return response.data;
				}
				return null;
			} catch (err) {
				error.set(err instanceof Error ? err.message : 'POC验证失败');
				return null;
			}
		},

		testPOC: async (id: string, target: string): Promise<POCResult | null> => {
			loading.set(true);
			error.set(null);

			try {
				const response = await pocApi.testPOC(id, target);

				if (response.code === 200) {
					notifications.add({
						type: 'success',
						message: 'POC测试完成'
					});
					return response.data;
				} else {
					error.set(response.message || 'POC测试失败');
					return null;
				}
			} catch (err) {
				error.set(err instanceof Error ? err.message : 'POC测试失败');
				return null;
			} finally {
				loading.set(false);
			}
		},

		// 漏洞管理
		loadVulnerabilities: async (params?: {
			page?: number;
			pageSize?: number;
			projectId?: string;
			severity?: VulnerabilitySeverity;
			status?: VulnerabilityStatus;
			type?: VulnerabilityType;
			search?: string;
		}) => {
			loading.set(true);
			error.set(null);

			try {
				const currentFilters = get(vulnerabilityFilters);
				const queryParams = { ...currentFilters, ...params };
				const response = await vulnerabilityApi.getVulnerabilities(queryParams);

				if (response.code === 200) {
					vulnerabilities.set(response.data.items);
					vulnerabilityPagination.set({
						page: response.data.page,
						pageSize: response.data.pageSize,
						total: response.data.total,
						totalPages: response.data.totalPages
					});
					vulnerabilityFilters.set(queryParams);
				} else {
					error.set(response.message || '加载漏洞列表失败');
				}
			} catch (err) {
				error.set(err instanceof Error ? err.message : '加载漏洞列表失败');
			} finally {
				loading.set(false);
			}
		},

		updateVulnerabilityStatus: async (
			id: string,
			status: VulnerabilityStatus
		): Promise<boolean> => {
			try {
				const response = await vulnerabilityApi.updateVulnerabilityStatus(id, status);

				if (response.code === 200) {
					vulnerabilities.update((currentVulns) =>
						currentVulns.map((vuln) => (vuln.id === id ? response.data : vuln))
					);
					notifications.add({
						type: 'success',
						message: '漏洞状态更新成功'
					});
					return true;
				} else {
					error.set(response.message || '更新漏洞状态失败');
					return false;
				}
			} catch (err) {
				error.set(err instanceof Error ? err.message : '更新漏洞状态失败');
				return false;
			}
		},

		// 扫描任务管理
		loadScanTasks: async (params?: {
			page?: number;
			pageSize?: number;
			projectId?: string;
			status?: string;
		}) => {
			loading.set(true);
			error.set(null);

			try {
				const currentFilters = get(scanTaskFilters);
				const queryParams = { ...currentFilters, ...params };
				const response = await vulnScanApi.getScanTasks(queryParams);

				if (response.code === 200) {
					scanTasks.set(response.data.items);
					scanTaskPagination.set({
						page: response.data.page,
						pageSize: response.data.pageSize,
						total: response.data.total,
						totalPages: response.data.totalPages
					});
					scanTaskFilters.set(queryParams);
				} else {
					error.set(response.message || '加载扫描任务列表失败');
				}
			} catch (err) {
				error.set(err instanceof Error ? err.message : '加载扫描任务列表失败');
			} finally {
				loading.set(false);
			}
		},

		createScanTask: async (data: {
			projectId: string;
			taskName: string;
			targets: string[];
			targetType: string;
			config: VulnScanConfig;
			tags?: string[];
		}): Promise<VulnScanTask | null> => {
			loading.set(true);
			error.set(null);

			try {
				const response = await vulnScanApi.createScanTask(data);

				if (response.code === 200) {
					scanTasks.update((currentTasks) => [response.data, ...currentTasks]);
					notifications.add({
						type: 'success',
						message: '扫描任务创建成功'
					});
					return response.data;
				} else {
					error.set(response.message || '创建扫描任务失败');
					return null;
				}
			} catch (err) {
				error.set(err instanceof Error ? err.message : '创建扫描任务失败');
				return null;
			} finally {
				loading.set(false);
			}
		},

		startScanTask: async (id: string): Promise<boolean> => {
			try {
				const response = await vulnScanApi.startScanTask(id);
				if (response.code === 200) {
					scanTasks.update((currentTasks) =>
						currentTasks.map((task) => (task.id === id ? { ...task, status: 'running' } : task))
					);
					notifications.add({
						type: 'success',
						message: '扫描任务已启动'
					});
					return true;
				}
				return false;
			} catch (err) {
				error.set(err instanceof Error ? err.message : '启动扫描任务失败');
				return false;
			}
		},

		stopScanTask: async (id: string): Promise<boolean> => {
			try {
				const response = await vulnScanApi.stopScanTask(id);
				if (response.code === 200) {
					scanTasks.update((currentTasks) =>
						currentTasks.map((task) => (task.id === id ? { ...task, status: 'canceled' } : task))
					);
					notifications.add({
						type: 'success',
						message: '扫描任务已停止'
					});
					return true;
				}
				return false;
			} catch (err) {
				error.set(err instanceof Error ? err.message : '停止扫描任务失败');
				return false;
			}
		},

		// 统计信息
		loadStats: async (projectId?: string) => {
			try {
				const [vulnStatsResponse, pocStatsResponse, taskStatsResponse] = await Promise.all([
					vulnStatsApi.getVulnerabilityStats(projectId),
					vulnStatsApi.getPOCStats(),
					vulnStatsApi.getScanTaskStats(projectId)
				]);

				if (vulnStatsResponse.code === 200) {
					vulnStats.set(vulnStatsResponse.data);
				}
				if (pocStatsResponse.code === 200) {
					pocStats.set(pocStatsResponse.data);
				}
				if (taskStatsResponse.code === 200) {
					scanTaskStats.set(taskStatsResponse.data);
				}
			} catch (err) {
				error.set(err instanceof Error ? err.message : '加载统计信息失败');
			}
		},

		// 单个扫描任务操作
		loadScanTask: async (id: string): Promise<VulnScanTask | null> => {
			try {
				const response = await vulnScanApi.getScanTask(id);
				if (response.code === 200) {
					selectedScanTask.set(response.data);
					return response.data;
				} else {
					error.set(response.message || '获取扫描任务失败');
					return null;
				}
			} catch (err) {
				error.set(err instanceof Error ? err.message : '获取扫描任务失败');
				return null;
			}
		},

		getSelectedScanTask: (): VulnScanTask | null => {
			return get(selectedScanTask);
		},

		loadScanResults: async (taskId: string): Promise<any[]> => {
			try {
				const response = await vulnScanApi.getScanTaskResults(taskId);
				if (response.code === 200) {
					// 确保返回一个数组
					const data = response.data;
					if (Array.isArray(data)) {
						return data;
					} else if (data && typeof data === 'object') {
						// 如果是对象，返回对象的值或空数组
						return Object.values(data).flat();
					} else {
						return [];
					}
				} else {
					error.set(response.message || '获取扫描结果失败');
					return [];
				}
			} catch (err) {
				error.set(err instanceof Error ? err.message : '获取扫描结果失败');
				return [];
			}
		},

		loadScanLogs: async (taskId: string): Promise<any[]> => {
			try {
				const response = await vulnScanApi.getScanTaskLogs(taskId);
				if (response.code === 200) {
					// 确保返回一个数组
					const data = response.data;
					if (Array.isArray(data)) {
						return data;
					} else if (data && typeof data === 'object' && 'logs' in data) {
						// 如果是包含 logs 字段的对象
						return (data as { logs: string[] }).logs || [];
					} else {
						return [];
					}
				} else {
					error.set(response.message || '获取扫描日志失败');
					return [];
				}
			} catch (err) {
				error.set(err instanceof Error ? err.message : '获取扫描日志失败');
				return [];
			}
		},

		deleteScanTask: async (id: string): Promise<boolean> => {
			try {
				const response = await vulnScanApi.deleteScanTask(id);
				if (response.code === 200) {
					// 从列表中移除已删除的任务
					scanTasks.update((tasks) => tasks.filter((task) => task.id !== id));
					notifications.add({
						type: 'success',
						message: '删除扫描任务成功'
					});
					return true;
				} else {
					error.set(response.message || '删除扫描任务失败');
					return false;
				}
			} catch (err) {
				error.set(err instanceof Error ? err.message : '删除扫描任务失败');
				return false;
			}
		},

		// 选择操作
		selectPOC: (poc: POC | null) => {
			selectedPOC.set(poc);
		},

		selectVulnerability: (vuln: Vulnerability | null) => {
			selectedVulnerability.set(vuln);
		},

		selectScanTask: (task: VulnScanTask | null) => {
			selectedScanTask.set(task);
		}
	};
}

export const vulnStore = createVulnStore();

// 导出store状态供组件使用
export {
	pocs as pocList,
	vulnerabilities as vulnerabilityList,
	scanTasks as scanTaskList,
	loading as vulnLoading,
	error as vulnErrorMessage
	// pocPagination, vulnerabilityPagination, scanTaskPagination 已经在上面单独导出了
};
