// 漏洞严重性级别
export type VulnerabilitySeverity = 'critical' | 'high' | 'medium' | 'low' | 'info';

// 漏洞状态
export type VulnerabilityStatus =
	| 'unverified'
	| 'verified'
	| 'fixed'
	| 'false_positive'
	| 'ignored';

// 漏洞类型
export type VulnerabilityType = 'web' | 'system' | 'network' | 'config' | 'component';

// POC脚本类型
export type POCScriptType = 'yaml' | 'python' | 'go' | 'nuclei' | 'javascript';

// POC模型
export interface POC {
	id: string;
	name: string;
	description: string;
	author: string;
	references: string[];
	cveId: string;
	cweId: string;
	severity: VulnerabilitySeverity;
	type: VulnerabilityType;
	category: string;
	script: string;
	scriptType: POCScriptType;
	createdAt: string;
	updatedAt: string;
	tags: string[];
	enabled: boolean;
	requiredParams: string[];
	defaultParams: Record<string, string>;
	successRate: number;
	runCount: number;
	successCount: number;
	failCount: number;
}

// POC执行结果
export interface POCResult {
	id: string;
	taskId: string;
	pocId: string;
	pocName: string; // 添加 pocName 属性
	target: string;
	targetUrl: string; // 添加 targetUrl 属性
	success: boolean;
	output: string;
	error: string;
	executionTime: number;
	executedAt: string; // 添加 executedAt 属性
	createdAt: string;
	vulnId?: string;
	request: string;
	response: string;
	payload: string;
	screenshot?: string;
	params: Record<string, string>;
}

// 漏洞模型
export interface Vulnerability {
	id: string;
	projectId: string;
	taskId: string;
	assetId: string;
	title: string;
	description: string;
	solution: string;
	references: string[];
	cveId: string;
	cweId: string;
	severity: VulnerabilitySeverity;
	status: VulnerabilityStatus;
	type: VulnerabilityType;
	affectedUrl: string;
	affectedHost: string;
	affectedPort: number;
	affectedParam: string;
	payload: string;
	request: string;
	response: string;
	screenshot?: string;
	pocName: string;
	discoveredAt: string;
	verifiedAt?: string;
	fixedAt?: string;
	createdAt: string;
	updatedAt: string;
	createdBy: string;
	updatedBy: string;
	tags: string[];
	customFields: Record<string, any>;
	score: number;
	reproSteps: string;
	notes: string;
}

// 漏洞扫描任务
export interface VulnScanTask {
	id: string;
	projectId: string;
	name: string; // 添加 name 属性
	taskName: string;
	target: string; // 添加 target 属性
	targets: string[];
	targetType: string;
	status: string;
	createdAt: string;
	startedAt?: string;
	completedAt?: string;
	progress: number;
	config: VulnScanConfig;
	resultSummary: VulnScanSummary;
	error?: string;
	nodeId: string;
	tags: string[];
}

// 漏洞扫描配置
export interface VulnScanConfig {
	pocIds: string[];
	pocCategories: string[];
	concurrency: number;
	timeout: number;
	retryCount: number;
	rateLimit: number;
	followRedirect: boolean;
	customHeaders: Record<string, string>;
	cookies: string;
	proxy: string;
	scanDepth: number;
	saveToDB: boolean;
	verifyVuln: boolean;
	minimumSeverity: VulnerabilitySeverity;
}

// 漏洞扫描结果摘要
export interface VulnScanSummary {
	totalTargets: number;
	scannedTargets: number;
	totalVulns: number;
	totalVulnerabilities: number; // 添加这个属性以匹配使用
	criticalVulns: number;
	highVulns: number;
	highSeverityCount: number; // 添加这个属性以匹配使用
	mediumVulns: number;
	lowVulns: number;
	infoVulns: number;
	pocSuccessCount: number; // 添加这个属性以匹配使用
	vulnTypes: Record<string, number>;
}

// POC模板结构（用于YAML POC）
export interface POCTemplate {
	info: {
		name: string;
		author?: string;
		severity: VulnerabilitySeverity;
		description?: string;
		reference?: string[];
		tags?: string[];
	};
	requests: POCRequest[];
	variables?: Record<string, string>;
}

export interface POCRequest {
	method: string;
	path: string;
	headers?: Record<string, string>;
	body?: string;
	matchers: POCMatcher[];
	extractors?: POCExtractor[];
}

export interface POCMatcher {
	type: 'status' | 'word' | 'regex' | 'size';
	status?: number[];
	words?: string[];
	regex?: string[];
	size?: number[];
	condition?: 'and' | 'or';
	part?: 'body' | 'header' | 'all';
}

export interface POCExtractor {
	type: 'regex' | 'xpath' | 'json';
	name: string;
	part: 'body' | 'header';
	group?: number;
	regex?: string[];
	xpath?: string[];
	json?: string[];
}

// 严重性级别显示配置
export const SEVERITY_CONFIG = {
	critical: {
		label: '严重',
		color: 'red',
		bgColor: 'bg-red-100',
		textColor: 'text-red-800',
		borderColor: 'border-red-200'
	},
	high: {
		label: '高危',
		color: 'orange',
		bgColor: 'bg-orange-100',
		textColor: 'text-orange-800',
		borderColor: 'border-orange-200'
	},
	medium: {
		label: '中危',
		color: 'yellow',
		bgColor: 'bg-yellow-100',
		textColor: 'text-yellow-800',
		borderColor: 'border-yellow-200'
	},
	low: {
		label: '低危',
		color: 'blue',
		bgColor: 'bg-blue-100',
		textColor: 'text-blue-800',
		borderColor: 'border-blue-200'
	},
	info: {
		label: '信息',
		color: 'gray',
		bgColor: 'bg-gray-100',
		textColor: 'text-gray-800',
		borderColor: 'border-gray-200'
	}
} as const;

// 状态显示配置
export const STATUS_CONFIG = {
	unverified: {
		label: '未验证',
		color: 'gray',
		bgColor: 'bg-gray-100',
		textColor: 'text-gray-800'
	},
	verified: {
		label: '已验证',
		color: 'red',
		bgColor: 'bg-red-100',
		textColor: 'text-red-800'
	},
	fixed: {
		label: '已修复',
		color: 'green',
		bgColor: 'bg-green-100',
		textColor: 'text-green-800'
	},
	false_positive: {
		label: '误报',
		color: 'yellow',
		bgColor: 'bg-yellow-100',
		textColor: 'text-yellow-800'
	},
	ignored: {
		label: '已忽略',
		color: 'gray',
		bgColor: 'bg-gray-100',
		textColor: 'text-gray-800'
	}
} as const;

// 类型显示配置
export const TYPE_CONFIG = {
	web: {
		label: 'Web漏洞',
		icon: '🌐'
	},
	system: {
		label: '系统漏洞',
		icon: '💻'
	},
	network: {
		label: '网络漏洞',
		icon: '🌍'
	},
	config: {
		label: '配置漏洞',
		icon: '⚙️'
	},
	component: {
		label: '组件漏洞',
		icon: '🔧'
	}
} as const;

// 任务状态配置
export const TASK_STATUS_CONFIG = {
	pending: {
		label: '等待中',
		color: 'gray',
		bgColor: 'bg-gray-100',
		textColor: 'text-gray-800'
	},
	queued: {
		label: '已入队',
		color: 'blue',
		bgColor: 'bg-blue-100',
		textColor: 'text-blue-800'
	},
	running: {
		label: '运行中',
		color: 'yellow',
		bgColor: 'bg-yellow-100',
		textColor: 'text-yellow-800'
	},
	completed: {
		label: '已完成',
		color: 'green',
		bgColor: 'bg-green-100',
		textColor: 'text-green-800'
	},
	failed: {
		label: '失败',
		color: 'red',
		bgColor: 'bg-red-100',
		textColor: 'text-red-800'
	},
	canceled: {
		label: '已取消',
		color: 'gray',
		bgColor: 'bg-gray-100',
		textColor: 'text-gray-800'
	},
	timeout: {
		label: '超时',
		color: 'orange',
		bgColor: 'bg-orange-100',
		textColor: 'text-orange-800'
	}
} as const;
