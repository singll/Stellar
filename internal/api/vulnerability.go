package api

import (
	"net/http"
	"strconv"
	"time"

	"github.com/StellarServer/internal/models"
	"github.com/StellarServer/internal/services/vulnscan"
	"github.com/gin-gonic/gin"
	"go.mongodb.org/mongo-driver/bson/primitive"
	"go.mongodb.org/mongo-driver/mongo"
)

// VulnerabilityAPI 漏洞扫描API
type VulnerabilityAPI struct {
	engine   *vulnscan.Engine
	handler  *vulnscan.VulnHandler
	registry vulnscan.PluginRegistry
}

// VulnerabilityHandler 漏洞处理器
type VulnerabilityHandler struct {
	DB      *mongo.Database
	Handler *vulnscan.VulnHandler
}

// NewVulnerabilityAPI 创建漏洞扫描API
func NewVulnerabilityAPI(engine *vulnscan.Engine, handler *vulnscan.VulnHandler, registry vulnscan.PluginRegistry) *VulnerabilityAPI {
	return &VulnerabilityAPI{
		engine:   engine,
		handler:  handler,
		registry: registry,
	}
}

// NewVulnerabilityHandler 创建漏洞处理器
func NewVulnerabilityHandler(db *mongo.Database, handler *vulnscan.VulnHandler) *VulnerabilityHandler {
	return &VulnerabilityHandler{
		DB:      db,
		Handler: handler,
	}
}

// RegisterRoutes 注册路由
func (api *VulnerabilityAPI) RegisterRoutes(router *gin.RouterGroup) {
	vulnGroup := router.Group("/vulnerability")
	{
		// 任务管理
		vulnGroup.POST("/tasks", api.CreateScanTask)
		vulnGroup.GET("/tasks", api.GetScanTasks)
		vulnGroup.GET("/tasks/:id", api.GetScanTask)
		vulnGroup.POST("/tasks/:id/start", api.StartScanTask)
		vulnGroup.POST("/tasks/:id/stop", api.StopScanTask)
		vulnGroup.DELETE("/tasks/:id", api.DeleteScanTask)

		// 任务结果
		vulnGroup.GET("/tasks/:id/results", api.GetTaskResults)
		vulnGroup.GET("/tasks/:id/summary", api.GetTaskSummary)
		vulnGroup.GET("/tasks/:id/vulnerabilities", api.GetTaskVulnerabilities)

		// 漏洞管理
		vulnGroup.GET("/vulnerabilities", api.GetVulnerabilities)
		vulnGroup.GET("/vulnerabilities/:id", api.GetVulnerability)
		vulnGroup.PUT("/vulnerabilities/:id/status", api.UpdateVulnerabilityStatus)

		// POC管理
		vulnGroup.GET("/pocs", api.GetPOCs)
		vulnGroup.GET("/pocs/:id", api.GetPOC)
		vulnGroup.POST("/pocs", api.CreatePOC)
		vulnGroup.PUT("/pocs/:id", api.UpdatePOC)
		vulnGroup.DELETE("/pocs/:id", api.DeletePOC)
	}
}

// RegisterRoutes 注册路由
func (h *VulnerabilityHandler) RegisterRoutes(router *gin.RouterGroup) {
	vulnGroup := router.Group("/vulnerabilities")
	{
		vulnGroup.POST("/tasks", h.CreateScanTask)
		vulnGroup.GET("/tasks", h.ListScanTasks)
		vulnGroup.GET("/tasks/:id", h.GetScanTask)
		vulnGroup.DELETE("/tasks/:id", h.DeleteScanTask)
		vulnGroup.GET("", h.ListVulnerabilities)
		vulnGroup.GET("/:id", h.GetVulnerability)
		vulnGroup.PUT("/:id/status", h.UpdateVulnerabilityStatus)
	}
}

// CreateScanTask 创建扫描任务
func (api *VulnerabilityAPI) CreateScanTask(c *gin.Context) {
	var task models.VulnScanTask
	if err := c.ShouldBindJSON(&task); err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"error": err.Error()})
		return
	}

	// 验证必要参数
	if task.ProjectID.IsZero() {
		c.JSON(http.StatusBadRequest, gin.H{"error": "项目ID不能为空"})
		return
	}

	if len(task.Targets) == 0 {
		c.JSON(http.StatusBadRequest, gin.H{"error": "扫描目标不能为空"})
		return
	}

	// 设置默认值
	if task.TaskName == "" {
		task.TaskName = "漏洞扫描任务_" + time.Now().Format("2006-01-02_15:04:05")
	}

	if task.TargetType == "" {
		task.TargetType = "url"
	}

	// 设置默认配置
	if task.Config.Concurrency <= 0 {
		task.Config.Concurrency = 10
	}

	if task.Config.Timeout <= 0 {
		task.Config.Timeout = 30
	}

	if task.Config.RetryCount <= 0 {
		task.Config.RetryCount = 3
	}

	// 创建任务
	taskID, err := api.engine.CreateTask(&task)
	if err != nil {
		c.JSON(http.StatusInternalServerError, gin.H{"error": err.Error()})
		return
	}

	c.JSON(http.StatusOK, gin.H{
		"taskId": taskID,
		"status": "pending",
	})
}

// GetScanTasks 获取扫描任务列表
func (api *VulnerabilityAPI) GetScanTasks(c *gin.Context) {
	projectID := c.Query("projectId")
	if projectID == "" {
		c.JSON(http.StatusBadRequest, gin.H{"error": "项目ID不能为空"})
		return
	}

	// 解析分页参数
	page, _ := strconv.Atoi(c.DefaultQuery("page", "1"))
	pageSize, _ := strconv.Atoi(c.DefaultQuery("pageSize", "10"))
	if page <= 0 {
		page = 1
	}
	if pageSize <= 0 {
		pageSize = 10
	}

	// 解析项目ID
	objID, err := primitive.ObjectIDFromHex(projectID)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"error": "无效的项目ID"})
		return
	}

	// 查询任务
	filter := map[string]interface{}{
		"projectId": objID,
	}

	// 添加状态过滤
	status := c.Query("status")
	if status != "" {
		filter["status"] = status
	}

	// 获取任务列表
	tasks, total, err := api.handler.GetScanTasks(filter, page, pageSize)
	if err != nil {
		c.JSON(http.StatusInternalServerError, gin.H{"error": err.Error()})
		return
	}

	c.JSON(http.StatusOK, gin.H{
		"tasks": tasks,
		"total": total,
		"page":  page,
		"size":  pageSize,
	})
}

// GetScanTask 获取扫描任务详情
func (api *VulnerabilityAPI) GetScanTask(c *gin.Context) {
	taskID := c.Param("id")
	if taskID == "" {
		c.JSON(http.StatusBadRequest, gin.H{"error": "任务ID不能为空"})
		return
	}

	// 获取任务
	task, err := api.handler.GetScanTask(taskID)
	if err != nil {
		c.JSON(http.StatusInternalServerError, gin.H{"error": err.Error()})
		return
	}

	// 获取任务状态和进度
	status, _ := api.engine.GetTaskStatus(taskID)
	progress, _ := api.engine.GetTaskProgress(taskID)

	// 如果任务正在运行，更新状态和进度
	if status != "" {
		task.Status = status
		task.Progress = progress
	}

	c.JSON(http.StatusOK, task)
}

// StartScanTask 启动扫描任务
func (api *VulnerabilityAPI) StartScanTask(c *gin.Context) {
	taskID := c.Param("id")
	if taskID == "" {
		c.JSON(http.StatusBadRequest, gin.H{"error": "任务ID不能为空"})
		return
	}

	// 启动任务
	err := api.engine.StartTask(taskID)
	if err != nil {
		c.JSON(http.StatusInternalServerError, gin.H{"error": err.Error()})
		return
	}

	c.JSON(http.StatusOK, gin.H{
		"taskId": taskID,
		"status": "running",
	})
}

// StopScanTask 停止扫描任务
func (api *VulnerabilityAPI) StopScanTask(c *gin.Context) {
	taskID := c.Param("id")
	if taskID == "" {
		c.JSON(http.StatusBadRequest, gin.H{"error": "任务ID不能为空"})
		return
	}

	// 停止任务
	err := api.engine.StopTask(taskID)
	if err != nil {
		c.JSON(http.StatusInternalServerError, gin.H{"error": err.Error()})
		return
	}

	c.JSON(http.StatusOK, gin.H{
		"taskId": taskID,
		"status": "stopped",
	})
}

// DeleteScanTask 删除扫描任务
func (api *VulnerabilityAPI) DeleteScanTask(c *gin.Context) {
	taskID := c.Param("id")
	if taskID == "" {
		c.JSON(http.StatusBadRequest, gin.H{"error": "任务ID不能为空"})
		return
	}

	// 删除任务
	err := api.handler.DeleteScanTask(taskID)
	if err != nil {
		c.JSON(http.StatusInternalServerError, gin.H{"error": err.Error()})
		return
	}

	c.JSON(http.StatusOK, gin.H{
		"taskId":  taskID,
		"deleted": true,
	})
}

// GetTaskResults 获取任务结果
func (api *VulnerabilityAPI) GetTaskResults(c *gin.Context) {
	taskID := c.Param("id")
	if taskID == "" {
		c.JSON(http.StatusBadRequest, gin.H{"error": "任务ID不能为空"})
		return
	}

	// 获取结果
	results, err := api.handler.GetTaskResults(taskID)
	if err != nil {
		c.JSON(http.StatusInternalServerError, gin.H{"error": err.Error()})
		return
	}

	c.JSON(http.StatusOK, results)
}

// GetTaskSummary 获取任务摘要
func (api *VulnerabilityAPI) GetTaskSummary(c *gin.Context) {
	taskID := c.Param("id")
	if taskID == "" {
		c.JSON(http.StatusBadRequest, gin.H{"error": "任务ID不能为空"})
		return
	}

	// 获取摘要
	summary, err := api.handler.GetTaskSummary(taskID)
	if err != nil {
		c.JSON(http.StatusInternalServerError, gin.H{"error": err.Error()})
		return
	}

	c.JSON(http.StatusOK, summary)
}

// GetTaskVulnerabilities 获取任务漏洞
func (api *VulnerabilityAPI) GetTaskVulnerabilities(c *gin.Context) {
	taskID := c.Param("id")
	if taskID == "" {
		c.JSON(http.StatusBadRequest, gin.H{"error": "任务ID不能为空"})
		return
	}

	// 获取漏洞
	vulns, err := api.handler.GetTaskVulnerabilities(taskID)
	if err != nil {
		c.JSON(http.StatusInternalServerError, gin.H{"error": err.Error()})
		return
	}

	c.JSON(http.StatusOK, vulns)
}

// GetVulnerabilities 获取漏洞列表
func (api *VulnerabilityAPI) GetVulnerabilities(c *gin.Context) {
	projectID := c.Query("projectId")
	if projectID == "" {
		c.JSON(http.StatusBadRequest, gin.H{"error": "项目ID不能为空"})
		return
	}

	// 解析分页参数
	page, _ := strconv.Atoi(c.DefaultQuery("page", "1"))
	pageSize, _ := strconv.Atoi(c.DefaultQuery("pageSize", "10"))
	if page <= 0 {
		page = 1
	}
	if pageSize <= 0 {
		pageSize = 10
	}

	// 构建查询条件
	query := make(map[string]interface{})

	// 添加状态过滤
	status := c.Query("status")
	if status != "" {
		query["status"] = status
	}

	// 添加严重性过滤
	severity := c.Query("severity")
	if severity != "" {
		query["severity"] = severity
	}

	// 添加类型过滤
	vulnType := c.Query("type")
	if vulnType != "" {
		query["type"] = vulnType
	}

	// 获取漏洞列表
	vulns, total, err := api.handler.GetVulnerabilities(projectID, query, page, pageSize)
	if err != nil {
		c.JSON(http.StatusInternalServerError, gin.H{"error": err.Error()})
		return
	}

	c.JSON(http.StatusOK, gin.H{
		"vulnerabilities": vulns,
		"total":           total,
		"page":            page,
		"size":            pageSize,
	})
}

// GetVulnerability 获取漏洞详情
func (api *VulnerabilityAPI) GetVulnerability(c *gin.Context) {
	vulnID := c.Param("id")
	if vulnID == "" {
		c.JSON(http.StatusBadRequest, gin.H{"error": "漏洞ID不能为空"})
		return
	}

	// 获取漏洞
	vuln, err := api.handler.GetVulnerabilityByID(vulnID)
	if err != nil {
		c.JSON(http.StatusInternalServerError, gin.H{"error": err.Error()})
		return
	}

	c.JSON(http.StatusOK, vuln)
}

// UpdateVulnerabilityStatus 更新漏洞状态
func (api *VulnerabilityAPI) UpdateVulnerabilityStatus(c *gin.Context) {
	vulnID := c.Param("id")
	if vulnID == "" {
		c.JSON(http.StatusBadRequest, gin.H{"error": "漏洞ID不能为空"})
		return
	}

	var req struct {
		Status models.VulnerabilityStatus `json:"status"`
	}
	if err := c.ShouldBindJSON(&req); err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"error": err.Error()})
		return
	}

	// 更新状态
	err := api.handler.UpdateVulnerabilityStatus(vulnID, req.Status)
	if err != nil {
		c.JSON(http.StatusInternalServerError, gin.H{"error": err.Error()})
		return
	}

	c.JSON(http.StatusOK, gin.H{
		"id":     vulnID,
		"status": req.Status,
	})
}

// GetPOCs 获取POC列表
func (api *VulnerabilityAPI) GetPOCs(c *gin.Context) {
	// 解析分页参数
	page, _ := strconv.Atoi(c.DefaultQuery("page", "1"))
	pageSize, _ := strconv.Atoi(c.DefaultQuery("pageSize", "10"))
	if page <= 0 {
		page = 1
	}
	if pageSize <= 0 {
		pageSize = 10
	}

	// 构建查询条件
	query := make(map[string]interface{})

	// 添加分类过滤
	category := c.Query("category")
	if category != "" {
		query["category"] = category
	}

	// 添加类型过滤
	pocType := c.Query("type")
	if pocType != "" {
		query["type"] = pocType
	}

	// 添加严重性过滤
	severity := c.Query("severity")
	if severity != "" {
		query["severity"] = severity
	}

	// 获取POC列表
	pocs, total, err := api.handler.GetPOCs(query, page, pageSize)
	if err != nil {
		c.JSON(http.StatusInternalServerError, gin.H{"error": err.Error()})
		return
	}

	c.JSON(http.StatusOK, gin.H{
		"pocs":  pocs,
		"total": total,
		"page":  page,
		"size":  pageSize,
	})
}

// GetPOC 获取POC详情
func (api *VulnerabilityAPI) GetPOC(c *gin.Context) {
	pocID := c.Param("id")
	if pocID == "" {
		c.JSON(http.StatusBadRequest, gin.H{"error": "POC ID不能为空"})
		return
	}

	// 获取POC
	poc, err := api.handler.GetPOCByID(pocID)
	if err != nil {
		c.JSON(http.StatusInternalServerError, gin.H{"error": err.Error()})
		return
	}

	c.JSON(http.StatusOK, poc)
}

// CreatePOC 创建POC
func (api *VulnerabilityAPI) CreatePOC(c *gin.Context) {
	var poc models.POC
	if err := c.ShouldBindJSON(&poc); err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"error": err.Error()})
		return
	}

	// 验证必要参数
	if poc.Name == "" {
		c.JSON(http.StatusBadRequest, gin.H{"error": "POC名称不能为空"})
		return
	}

	if poc.Script == "" {
		c.JSON(http.StatusBadRequest, gin.H{"error": "POC脚本不能为空"})
		return
	}

	// 设置默认值
	if poc.ID.IsZero() {
		poc.ID = primitive.NewObjectID()
	}
	if poc.CreatedAt.IsZero() {
		poc.CreatedAt = time.Now()
	}
	poc.UpdatedAt = time.Now()
	poc.Enabled = true

	// 创建POC
	err := api.handler.CreatePOC(&poc)
	if err != nil {
		c.JSON(http.StatusInternalServerError, gin.H{"error": err.Error()})
		return
	}

	c.JSON(http.StatusOK, gin.H{
		"id":   poc.ID.Hex(),
		"name": poc.Name,
	})
}

// UpdatePOC 更新POC
func (api *VulnerabilityAPI) UpdatePOC(c *gin.Context) {
	pocID := c.Param("id")
	if pocID == "" {
		c.JSON(http.StatusBadRequest, gin.H{"error": "POC ID不能为空"})
		return
	}

	var poc models.POC
	if err := c.ShouldBindJSON(&poc); err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"error": err.Error()})
		return
	}

	// 解析POC ID
	objID, err := primitive.ObjectIDFromHex(pocID)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"error": "无效的POC ID"})
		return
	}
	poc.ID = objID
	poc.UpdatedAt = time.Now()

	// 更新POC
	err = api.handler.UpdatePOC(&poc)
	if err != nil {
		c.JSON(http.StatusInternalServerError, gin.H{"error": err.Error()})
		return
	}

	c.JSON(http.StatusOK, gin.H{
		"id":      pocID,
		"updated": true,
	})
}

// DeletePOC 删除POC
func (api *VulnerabilityAPI) DeletePOC(c *gin.Context) {
	pocID := c.Param("id")
	if pocID == "" {
		c.JSON(http.StatusBadRequest, gin.H{"error": "POC ID不能为空"})
		return
	}

	// 删除POC
	err := api.handler.DeletePOC(pocID)
	if err != nil {
		c.JSON(http.StatusInternalServerError, gin.H{"error": err.Error()})
		return
	}

	c.JSON(http.StatusOK, gin.H{
		"id":      pocID,
		"deleted": true,
	})
}

// ListScanTasks 列出扫描任务
func (h *VulnerabilityHandler) ListScanTasks(c *gin.Context) {
	// TODO: 实现列出扫描任务
	c.JSON(200, gin.H{"message": "功能待实现"})
}

// ListVulnerabilities 列出漏洞
func (h *VulnerabilityHandler) ListVulnerabilities(c *gin.Context) {
	// TODO: 实现列出漏洞
	c.JSON(200, gin.H{"message": "功能待实现"})
}

// GetVulnerability 获取漏洞
func (h *VulnerabilityHandler) GetVulnerability(c *gin.Context) {
	// TODO: 实现获取漏洞
	c.JSON(200, gin.H{"message": "功能待实现"})
}

// UpdateVulnerabilityStatus 更新漏洞状态
func (h *VulnerabilityHandler) UpdateVulnerabilityStatus(c *gin.Context) {
	// TODO: 实现更新漏洞状态
	c.JSON(200, gin.H{"message": "功能待实现"})
}

// CreateScanTask 创建扫描任务
func (h *VulnerabilityHandler) CreateScanTask(c *gin.Context) {
	// TODO: 实现创建扫描任务
	c.JSON(200, gin.H{"message": "功能待实现"})
}

// GetScanTask 获取扫描任务
func (h *VulnerabilityHandler) GetScanTask(c *gin.Context) {
	// TODO: 实现获取扫描任务
	c.JSON(200, gin.H{"message": "功能待实现"})
}

// DeleteScanTask 删除扫描任务
func (h *VulnerabilityHandler) DeleteScanTask(c *gin.Context) {
	// TODO: 实现删除扫描任务
	c.JSON(200, gin.H{"message": "功能待实现"})
}
